START

# initBoard() -- initialize the board
Create BOARD - list of TILE objects with PIECE property
set PLAYER as "white"
set STEP as "piece"

# selectTile()
wait for interaction (clicked TILE)
store clicked TILE as SELECTED_TILE
set STEP as "location"

# displayMoveableTiles()
create a list of valid coords for SELECTED_TILE, output as MOVE list - validateMove()
set all TILE.selected in BOARD to False
loop through BOARD list, checking for valid coord match on each TILE
if TILE matches a valid coord, set TILE.selected to True
css will change color of any TILE.selected == True

# validateMove(newLocation: TILE, checkingAvailableMoves: boolean)
create VALIDATION_DATA object as data - defineValidationData(board[storedTile.piece.key], newLocation)   // why not just use SELECTED_TILE?


# defineValidationData(pastLocation:Tile, newLocation: Tile)
oldx = pastLocation.x 
oldy = pastLocation.y
newx = newLocation.x
newy = newLocation.y

if player is "white" {
    white = true
    startrow = 1
    playerValue = 1
} 
else if player is "black" {
    white = false
    startrow = 6
    playerValue = -1
}
get SELECTED_TILE piece name:
"PAWN" {
    get all valid pawn moves for tile(oldx, oldy)
}



Move validation steps:
1. Get the selected piece
2. Get move data for piece
3. Test every move returned from move data, return true if the coord is in move data





User input 1 - Click to select, click to place ------------------------------------------------------------------------




User input 2 - Pick up and drop ---------------------------------------------------------------------------------------

